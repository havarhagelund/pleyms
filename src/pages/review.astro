---
import Layout from '../layouts/Layout.astro';
import { supabase } from '../lib/supabase';
import Nav from '../components/Nav.astro';

interface Review {
	id: string;
	name: string;
	rating: number;
	review: string;
	created_at: string;
}

// Fetch reviews from Supabase
const { data: reviews, error } = await supabase
	.from('reviews')
	.select('*')
	.order('created_at', { ascending: false });

console.log(reviews);

if (error) {
	console.error('Error fetching reviews:', error);
}
---

<Layout title="Reviews - Pleyms Pizza">
	<div class="bg-zinc-800 text-white sm:p-10 min-h-[calc(100dvh)] w-screen flex flex-col">
		<div class="flex-1 flex flex-col items-center justify-center">
			<div class="w-full max-w-2xl">
				<div class="text-center mb-8">
					<a href="/" class="text-3xl sm:text-5xl text-white font-restoration">PLEYMS<br>PIZZA<br>BALCONY</a>
				</div>
				<div class="text-center mb-8">
					<h3 class="font-pinewood text-white text-xl">Customer Reviews</h3>
				</div>
				
				<!-- Reviews Display Section -->
				<div class="space-y-6">
					{reviews?.map((review: Review) => (
						<div class="bg-zinc-700 p-6 rounded-lg shadow-sm border border-zinc-600">
							<div class="flex mb-3">
								{Array.from({ length: review.rating }).map(() => (
									<span class="text-2xl">üçï</span>
								))}
								{Array.from({ length: 5 - review.rating }).map(() => (
									<span class="text-2xl opacity-30">üçï</span>
								))}
							</div>
							<p class="text-gray-200 leading-relaxed mb-4">{review.review}</p>
							<div class="flex items-center gap-4 pt-4 border-t border-zinc-600">
								<div class="w-10 h-10 rounded-full bg-zinc-600 overflow-hidden flex-shrink-0">
									<div class="w-full h-full flex items-center justify-center text-gray-300">
										{review.name.charAt(0).toUpperCase()}
									</div>
								</div>
								<div class="flex-1">
									<h3 class="text-sm font-semibold text-white">{review.name}</h3>
									<p class="text-xs text-gray-400">Reviewed on {new Date(review.created_at).toLocaleDateString('en-US', {
										month: 'long',
										day: 'numeric',
										year: 'numeric'
									})}</p>
								</div>
							</div>
						</div>
					))}
				</div>

				<!-- Add Review Button -->
				<div class="text-center mt-8">
					<button
						id="openReviewDialog"
						class="bg-orange-600 text-white px-6 py-2 rounded-md hover:bg-orange-700 transition-colors font-medium inline-flex items-center gap-2"
					>
						<svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
							<path d="M12 5v14M5 12h14"/>
						</svg>
						Add Review
					</button>
				</div>
			</div>
		</div>

		<div class="mt-auto">
			<Nav/>
		</div>

		<!-- Review Dialog -->
		<dialog id="reviewDialog" class="bg-zinc-800 text-white rounded-lg shadow-xl p-0 w-full max-w-lg backdrop:bg-gray-950/50">
			<div class="p-6">
				<div class="flex items-center justify-between mb-6">
					<h2 class="text-2xl font-pinewood">Share Your Experience</h2>
					<button
						type="button"
						id="closeReviewDialog"
						class="text-gray-400 hover:text-gray-300 transition-colors"
						aria-label="Close dialog"
					>
						<svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
							<path d="M18 6L6 18M6 6l12 12"/>
						</svg>
					</button>
				</div>

				<form id="reviewForm" class="space-y-6">
					<div>
						<label for="name" class="block text-sm font-medium text-gray-200 mb-2">Name</label>
						<input
							type="text"
							id="name"
							name="name"
							class="w-full px-4 py-2 bg-zinc-700 border border-zinc-600 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent text-white"
							required
						/>
					</div>

					<div>
						<label for="rating" class="block text-sm font-medium text-gray-200 mb-2">Rating</label>
						<select
							id="rating"
							name="rating"
							class="w-full px-4 py-2 bg-zinc-700 border border-zinc-600 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent text-white"
							required
						>
							<option value="">Select a rating</option>
							<option value="5">5 Stars - Excellent</option>
							<option value="4">4 Stars - Very Good</option>
							<option value="3">3 Stars - Good</option>
							<option value="2">2 Stars - Fair</option>
							<option value="1">1 Star - Poor</option>
						</select>
					</div>

					<div>
						<label for="review" class="block text-sm font-medium text-gray-200 mb-2">Your Review</label>
						<textarea
							id="review"
							name="review"
							rows="4"
							class="w-full px-4 py-2 bg-zinc-700 border border-zinc-600 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent text-white"
							required
						></textarea>
					</div>

					<div class="flex gap-4 pt-4">
						<button
							type="button"
							class="flex-1 px-4 py-2 border border-zinc-600 text-gray-200 rounded-md hover:bg-zinc-700 transition-colors font-medium"
							onclick="document.getElementById('reviewDialog').close()"
						>
							Cancel
						</button>
						<button
							type="submit"
							class="flex-1 bg-orange-600 text-white py-2 px-4 rounded-md hover:bg-orange-700 transition-colors font-medium"
						>
							Submit Review
						</button>
					</div>
				</form>
			</div>
		</dialog>
	</div>
</Layout>

<script>
	interface ReviewFormData {
		name: string;
		rating: number;
		review: string;
	}

	const dialog = document.getElementById('reviewDialog') as HTMLDialogElement;
	const openButton = document.getElementById('openReviewDialog');
	const closeButton = document.getElementById('closeReviewDialog');
	const form = document.getElementById('reviewForm');

	// Open dialog
	openButton?.addEventListener('click', () => {
		dialog?.showModal();
	});

	// Close dialog
	closeButton?.addEventListener('click', () => {
		dialog?.close();
	});

	// Close dialog when clicking outside
	dialog?.addEventListener('click', (e) => {
		const dialogDimensions = dialog.getBoundingClientRect();
		if (
			e.clientX < dialogDimensions.left ||
			e.clientX > dialogDimensions.right ||
			e.clientY < dialogDimensions.top ||
			e.clientY > dialogDimensions.bottom
		) {
			dialog.close();
		}
	});
	
	form?.addEventListener('submit', async (e) => {
		e.preventDefault();
		
		const formData = new FormData(e.target as HTMLFormElement);
		const reviewData: ReviewFormData = {
			name: formData.get('name') as string,
			rating: parseInt(formData.get('rating') as string),
			review: formData.get('review') as string,
		};
		
		try {
			const submitButton = (e.target as HTMLFormElement).querySelector('button[type="submit"]') as HTMLButtonElement;
			if (submitButton) {
				submitButton.disabled = true;
				submitButton.textContent = 'Submitting...';
			}

			const response = await fetch('/api/reviews', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify(reviewData),
			});

			const data = await response.json();
			
			if (!response.ok) {
				throw new Error(data.error || 'Failed to submit review');
			}
			
			// Close the dialog first
			dialog?.close();
			
			// Show success message in the UI
			const successMessage = document.createElement('div');
			successMessage.className = 'fixed bottom-4 right-4 bg-green-600 text-white px-6 py-3 rounded-md shadow-lg z-50';
			successMessage.textContent = 'Thank you for your review!';
			document.body.appendChild(successMessage);
			
			// Remove the message after 3 seconds
			setTimeout(() => {
				successMessage.remove();
			}, 3000);
			
			// Reload the page to show the new review
			window.location.reload();
		} catch (error) {
			console.error('Error submitting review:', error);
			const errorMessage = document.createElement('div');
			errorMessage.className = 'fixed bottom-4 right-4 bg-red-600 text-white px-6 py-3 rounded-md shadow-lg z-50';
			errorMessage.textContent = 'There was an error submitting your review. Please try again.';
			document.body.appendChild(errorMessage);
			
			// Remove the message after 3 seconds
			setTimeout(() => {
				errorMessage.remove();
			}, 3000);
		} finally {
			const submitButton = (e.target as HTMLFormElement).querySelector('button[type="submit"]') as HTMLButtonElement;
			if (submitButton) {
				submitButton.disabled = false;
				submitButton.textContent = 'Submit Review';
			}
		}
	});
</script>

<style>
	dialog::backdrop {
		background: rgba(0, 0, 0, 0.5);
		backdrop-filter: blur(4px);
	}
</style> 